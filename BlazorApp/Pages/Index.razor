@page "/"

<PageTitle>code evaluation</PageTitle>

@using BlazorApp.Data
@inject ResultsRepository ResultsRepository
@inject MessagingService MessagingService

<h1>code evaluation</h1>
<p>enter code and let it be evaluated</p>

<EditForm Model="@_model" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <InputTextArea id="name" @bind-Value="_model.Code" />
    <button type="submit">Submit</button>
</EditForm>


<p>execution id @_result?.ExecutionId</p>
<p>code to execute: @_result?.Code</p>

<button @onclick="UpdateResult">
    Update previous results
</button>

@if (_executionResults == null)
{
    <div>loading...</div>
}
else
{
    <table class="table" id="myTable">
    <thead>
        <tr>
            <th>id</th>
            <th>time taken (ms)</th>
            <th>log</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var r in _executionResults)
            {
                <tr>
                    <td>@r.ExecutionId</td>
                    <td>@r.TimeTaken</td>
                    <td>@r.Log.Substring(0,30)</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private ExecutionRequest? _result;
    private CodeExecutionInputModel _model = new();
    private IEnumerable<ExecutionResult>? _executionResults;

    private async Task UpdateResult()
    {
        _executionResults = null;
        StateHasChanged();

        _executionResults = await ResultsRepository.ListBucketContentsAsync();

    }

    private async Task HandleValidSubmit()
    {

        _result = null;
        StateHasChanged();

        var request = new ExecutionRequest {
            ExecutionId = Guid.NewGuid(),
            Code = _model.Code
        };
        await MessagingService.PostToQueue(request);

        _result = request;
    }

    protected override async Task OnInitializedAsync()
    {
        _model = new()
        {
            Code = @"System.Threading.Thread.Sleep(100);"
        };

        await Task.CompletedTask;
    }
}
